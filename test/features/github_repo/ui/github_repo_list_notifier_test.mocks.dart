// Mocks generated by Mockito 5.3.2 from annotations
// in repo_search/test/features/github_repo/ui/github_repo_list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:repo_search/features/github_repo/data/gihub_repo_repository.dart'
    as _i4;
import 'package:repo_search/features/github_repo/data/search_settings_repository.dart'
    as _i7;
import 'package:repo_search/features/github_repo/model/search_repos_result.dart'
    as _i3;
import 'package:repo_search/features/github_repo/model/search_settings_state.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchReposResult_1 extends _i1.SmartFake
    implements _i3.SearchReposResult {
  _FakeSearchReposResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubRepoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepoRepository extends _i1.Mock
    implements _i4.GithubRepoRepository {
  MockGithubRepoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  String get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: '',
      ) as String);
  @override
  _i5.Future<_i3.SearchReposResult> searchRepos({
    required String? searchKeywords,
    required _i6.SearchSettingsSort? sort,
    required _i6.SearchSettingsOrder? order,
    required int? page,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRepos,
          [],
          {
            #searchKeywords: searchKeywords,
            #sort: sort,
            #order: order,
            #page: page,
            #cancelToken: cancelToken,
          },
        ),
        returnValue:
            _i5.Future<_i3.SearchReposResult>.value(_FakeSearchReposResult_1(
          this,
          Invocation.method(
            #searchRepos,
            [],
            {
              #searchKeywords: searchKeywords,
              #sort: sort,
              #order: order,
              #page: page,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i5.Future<_i3.SearchReposResult>);
  @override
  _i5.Future<int> getWatchersCount({required String? repositoryUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchersCount,
          [],
          {#repositoryUrl: repositoryUrl},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [SearchSettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchSettingsRepository extends _i1.Mock
    implements _i7.SearchSettingsRepository {
  MockSearchSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SearchSettingsSort get sort => (super.noSuchMethod(
        Invocation.getter(#sort),
        returnValue: _i6.SearchSettingsSort.bestMatch,
      ) as _i6.SearchSettingsSort);
  @override
  _i6.SearchSettingsOrder get order => (super.noSuchMethod(
        Invocation.getter(#order),
        returnValue: _i6.SearchSettingsOrder.desc,
      ) as _i6.SearchSettingsOrder);
  @override
  _i5.Future<void> setSort(_i6.SearchSettingsSort? sort) => (super.noSuchMethod(
        Invocation.method(
          #setSort,
          [sort],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> setOrder(_i6.SearchSettingsOrder? order) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOrder,
          [order],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
